-- Cleaning Data in SQL Queries

-- Select all records from the nashvillehousing table
SELECT * 
FROM portfoilo_project.nashvillehousing;

-- Populate property address data by selecting and ordering the records
SELECT *
FROM portfoilo_project.nashvillehousing
-- Uncomment the following line to filter by null or empty PropertyAddress
-- WHERE PropertyAddress IS NULL OR PropertyAddress = ''
ORDER BY ParcelID;

-- Join the table with itself to populate PropertyAddress data
SELECT a.ParcelID, 
       a.PropertyAddress, 
       b.ParcelID, 
       b.PropertyAddress, 
       -- Use COALESCE to handle null or empty values
       COALESCE(NULLIF(a.PropertyAddress, ''), b.PropertyAddress) AS paddy
FROM portfoilo_project.nashvillehousing a
JOIN portfoilo_project.nashvillehousing b
    ON a.ParcelID = b.ParcelID
    AND a.UniqueID <> b.UniqueID
WHERE a.PropertyAddress IS NULL OR a.PropertyAddress = '';

-- Disable safe updates to allow the update query
SET SQL_SAFE_UPDATES = 0;

-- Update PropertyAddress in table 'a' using values from table 'b'
UPDATE portfoilo_project.nashvillehousing a
JOIN portfoilo_project.nashvillehousing b
    ON a.ParcelID = b.ParcelID
    AND a.UniqueID <> b.UniqueID
SET a.PropertyAddress = COALESCE(NULLIF(a.PropertyAddress, ''), b.PropertyAddress)
WHERE a.PropertyAddress IS NULL OR a.PropertyAddress = '';

-- Enable safe updates after the update operation
SET SQL_SAFE_UPDATES = 1;

-- Breaking out Address into individual columns (address, city, state)

-- Select PropertyAddress to examine its values
SELECT PropertyAddress
FROM portfoilo_project.nashvillehousing;

-- Split PropertyAddress into Address and City
SELECT 
    SUBSTRING(PropertyAddress, 1, INSTR(PropertyAddress, ',') - 1) AS Address,
    SUBSTRING(PropertyAddress, INSTR(PropertyAddress, ',') + 1, LENGTH(PropertyAddress)) AS City
FROM portfoilo_project.nashvillehousing;

-- Add new columns to store split Address and City
ALTER TABLE portfoilo_project.nashvillehousing
ADD COLUMN PropertySplitAddress VARCHAR(255),
ADD COLUMN PropertySplitCity VARCHAR(255);

-- Update the new columns with the split values
UPDATE portfoilo_project.nashvillehousing
SET 
    PropertySplitAddress = SUBSTRING(PropertyAddress, 1, INSTR(PropertyAddress, ',') - 1),
    PropertySplitCity = SUBSTRING(PropertyAddress, INSTR(PropertyAddress, ',') + 1, LENGTH(PropertyAddress));

-- OwnerAddress: Breaking out OwnerAddress into individual columns (street, city, state)

-- Select OwnerAddress to examine its values
SELECT OwnerAddress
FROM portfoilo_project.nashvillehousing;

-- Split OwnerAddress into STREET, CITY, and STATE
SELECT 
    -- Extract STREET
    SUBSTRING_INDEX(OwnerAddress, ',', 1) AS STREET,
    -- Extract CITY
    SUBSTRING_INDEX(SUBSTRING_INDEX(OwnerAddress, ',', 2), ',', -1) AS CITY,
    -- Extract STATE
    SUBSTRING_INDEX(OwnerAddress, ',', -1) AS STATE
FROM portfoilo_project.nashvillehousing;

-- Add new columns to store split STREET, CITY, and STATE
ALTER TABLE portfoilo_project.nashvillehousing
ADD COLUMN OwnerAddressSTREET VARCHAR(255),
ADD COLUMN OwnerAddressCITY VARCHAR(255),
ADD COLUMN OwnerAddressSTATE VARCHAR(255);

-- Update the new columns with the split values
UPDATE portfoilo_project.nashvillehousing
SET 
    OwnerAddressSTREET = SUBSTRING_INDEX(OwnerAddress, ',', 1),
    OwnerAddressCITY = SUBSTRING_INDEX(SUBSTRING_INDEX(OwnerAddress, ',', 2), ',', -1),
    OwnerAddressSTATE = SUBSTRING_INDEX(OwnerAddress, ',', -1);
    
-- Change Y and N to say YES and NO in 'SoldAsVacant' field

-- Select distinct values and count occurrences in SoldAsVacant
SELECT DISTINCT(SoldAsVacant), COUNT(SoldAsVacant)
FROM portfoilo_project.nashvillehousing
GROUP BY SoldAsVacant;

-- Update SoldAsVacant values to standardize Yes and No
UPDATE portfoilo_project.nashvillehousing
SET SoldAsVacant = CASE
    WHEN SoldAsVacant IN ('Y', 'Yes') THEN 'Yes'
    WHEN SoldAsVacant IN ('N', 'No') THEN 'No'
    ELSE SoldAsVacant
END;

-- Identify Duplicates

-- Select ParcelID and PropertyAddress with their counts to identify duplicates
SELECT ParcelID, PropertyAddress, COUNT(*)
FROM portfoilo_project.nashvillehousing
GROUP BY ParcelID, PropertyAddress
HAVING COUNT(*) > 1;

-- Remove Duplicates

-- Add a unique identifier to each row if not already present
ALTER TABLE portfoilo_project.nashvillehousing ADD COLUMN id INT AUTO_INCREMENT PRIMARY KEY;

-- Delete duplicate rows while keeping one instance
DELETE a
FROM portfoilo_project.nashvillehousing a
INNER JOIN (
    SELECT id
    FROM (
        SELECT MIN(id) AS id
        FROM portfoilo_project.nashvillehousing
        GROUP BY ParcelID, PropertyAddress
        HAVING COUNT(*) > 1
    ) AS subquery
) b ON a.id = b.id;

-- Delete Unused Columns

-- Create a backup of the table before deleting columns
CREATE TABLE portfoilo_project.nashvillehousingCLEAN 
LIKE portfoilo_project.nashvillehousing;

-- Insert data into the backup table
INSERT INTO portfoilo_project.nashvillehousingCLEAN 
SELECT * FROM portfoilo_project.nashvillehousing;

-- Drop unused columns from the backup table
ALTER TABLE portfoilo_project.nashvillehousingCLEAN 
DROP COLUMN OwnerAddress,
DROP COLUMN TaxDistrict, 
DROP COLUMN PropertyAddress,
DROP COLUMN id,
DROP COLUMN PropertySplitAddress,
DROP COLUMN PropertySplitCity;
